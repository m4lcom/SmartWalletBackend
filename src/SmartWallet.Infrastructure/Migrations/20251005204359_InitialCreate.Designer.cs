// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartWallet.Infrastructure;

#nullable disable

namespace SmartWallet.Infrastructure.Migrations
{
    [DbContext(typeof(SmartWalletDbContext))]
    [Migration("20251005204359_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("SmartWallet.Domain.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("CurrencyCode")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("DestinationWalletId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DestinationWalletId");

                    b.HasIndex("WalletId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("SmartWallet.Domain.Entities.TransactionLedger", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CurrencyCode")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("DestinationTransactionId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DestinationWalletId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Metadata")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("SourceTransactionId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("SourceWalletId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DestinationWalletId");

                    b.HasIndex("SourceWalletId");

                    b.ToTable("TransactionLedgers");
                });

            modelBuilder.Entity("SmartWallet.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("UserID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("SmartWallet.Domain.Entities.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("CurrencyCode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserID")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("SmartWallet.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("SmartWallet.Domain.Entities.Wallet", "DestinationWallet")
                        .WithMany("ReceivedTransfers")
                        .HasForeignKey("DestinationWalletId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartWallet.Domain.Entities.Wallet", "Wallet")
                        .WithMany("Transactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DestinationWallet");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("SmartWallet.Domain.Entities.TransactionLedger", b =>
                {
                    b.HasOne("SmartWallet.Domain.Entities.Wallet", "DestinationWallet")
                        .WithMany("DestinationLedgers")
                        .HasForeignKey("DestinationWalletId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SmartWallet.Domain.Entities.Wallet", "SourceWallet")
                        .WithMany("SourceLedgers")
                        .HasForeignKey("SourceWalletId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DestinationWallet");

                    b.Navigation("SourceWallet");
                });

            modelBuilder.Entity("SmartWallet.Domain.Entities.Wallet", b =>
                {
                    b.HasOne("SmartWallet.Domain.Entities.User", "User")
                        .WithOne("Wallet")
                        .HasForeignKey("SmartWallet.Domain.Entities.Wallet", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartWallet.Domain.Entities.User", b =>
                {
                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("SmartWallet.Domain.Entities.Wallet", b =>
                {
                    b.Navigation("DestinationLedgers");

                    b.Navigation("ReceivedTransfers");

                    b.Navigation("SourceLedgers");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
